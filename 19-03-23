Q1:编写一个程序，找到两个单链表相交的起始节点。
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode * A = headA;
        ListNode * B = headB;
        int countA = 0;
        int countB = 0;
        while(A){
            A = A->next;
            countA++;
        }
        while(B){
            B = B->next;
            countB++;
        }
        int gap = A-B;
        if(gap>0){
            for(int i=0;i<gap;i++)
                headA = headA->next;
            
        }else{
            for(int i=0;i<gap;i++)
                headB = headB->next;
        }
        while(headA && headB)
        {
            if(headA == headB){
                return headA;
            }
            headA = headA->next;
            headB = headB->next;
        }
        return nullptr;
    }
};

Q2:给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head==nullptr || head->next == nullptr) return head;
        ListNode* odd = head;
        ListNode* first_even = head->next;
        ListNode* even = head->next;
        int i = 1;
        while(odd!=nullptr && even!=nullptr)
        {
            odd->next = even->next;
            odd = odd->next;
            even->next = odd->next;
            even = even->next;
        }
        odd->next = first_even;
        return head;
    }
};
